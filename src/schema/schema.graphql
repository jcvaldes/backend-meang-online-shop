"Definiciones de los tipos de raiz"
type Query {
  "Lista de usuarios registrados en la db (Clientes / Admins)"
  # users: [User!]!
   users: ResultUsers
   login(email: String!, password: String!): ResultLogin
   "Autenticarnos mediante token"
   me: ResultUser
}

type Mutation {
    register(user: UserInput!): ResultUser
}

"Interface para especificar las propiedades obligatorias en las respuestas"
interface Result {
  "Estado de la operación"
  status: Boolean!
  "Mensaje de la operación"
  message: String!
}

type ResultUsers implements Result{
  "Estado de la operación"
  status: Boolean!
  "Mensaje de la operación"
  message: String!
  "Lista de usuarios registrados en la db (Clientes / Admins)"
  users: [User!]!
}

type ResultUser implements Result{
  "Estado de la operación"
  status: Boolean!
  "Mensaje de la operación"
  message: String!
  "Información del usuario"
  user: User
}

type ResultLogin implements Result{
  "Estado de la operación"
  status: Boolean!
  "Mensaje de la operación"
  message: String!
  "Información de token del usuario logueado"
  token: String
}
"""
Vamos a especificar la información detallada del usuario.
* Vamos a tener en cuenta:
email  = usuario de la base de datos.
Fecha de nacimiento y registro en formato ISO
"""
type User {
  "Identificador unico"
  id: ID!
  "Nombre de pila"
  name: String!
  "Apellido/s"
  lastname: String!
  "Correo electrónico"
  email: String!
  "Password asociado a la cuenta"
  password: String!
  "Fecha de registro en la db"
  registerDate: String!
  "Fecha de nacimientos - Solo mayores de 18 años"
  birthday: String!
  "Permisos del usuario"
  role: Role!
}

"Input para añadir los datos del usuario en el registro"
input UserInput {
  "Identificador no obligatorio en un alta"
  id: ID
  "Nombre de pila"
  name: String!
  "Apellido/s"
  lastname: String!
  "Correo electrónico"
  email: String!
  "Password asociado a la cuenta"
  password: String!
  "Fecha de nacimientos - Solo mayores de 18 años"
  birthday: String!
  "Permisos del usuario"
  role: Role=CLIENT
}
enum Role {
  CLIENT
  ADMIN
}